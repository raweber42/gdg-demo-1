---
# PostgreSQL Deployment Example
# This represents the same database abstraction as database-abstraction.yml
# but using concrete PostgreSQL resources

apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: team
type: Opaque
data:
  # Base64 encoded values (user:password)
  username: dXNlcg==  # "user"
  password: cGFzc3dvcmQ=  # "password"
  database: bXktZGF0YWJhc2U=  # "my-database"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-storage
  namespace: team
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Matches sizeGb: 10 from abstraction

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: team
data:
  POSTGRES_DB: "my-database"
  POSTGRES_USER: "user"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: team
  labels:
    app: postgres
    database-abstraction: "my-database"
spec:
  replicas: 1  # isHighlyAvailable: false = single instance
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-storage

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: team
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres

---
# Optional: NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: team
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: team
    ports:
    - protocol: TCP
      port: 5432
